@inject IRepositorio repositorio

<EditForm Model="Pelicula" OnValidSubmit="OnDataAnnonationsValidated">
    <DataAnnotationsValidator />

    <div class="form-group">
        <label>Título:</label>
        <div>
            <InputText class="form-control" @bind-Value="@Pelicula.Titulo" />
            <ValidationMessage For="@(() => Pelicula.Titulo)" />
        </div>
    </div>

    <div class="form-group">
        <label>En cartelera:</label>
        <div>
            <InputCheckbox @bind-Value="@Pelicula.EnCartelera" />
            <ValidationMessage For="@(() => Pelicula.EnCartelera)" />
        </div>
    </div>

    <div class="form-group">
        <label>Trailer:</label>
        <div>
            <InputText class="form-control" @bind-Value="@Pelicula.Trailer" />
            <ValidationMessage For="@(() => Pelicula.Trailer)" />
        </div>
    </div>

    <div class="form-group">
        <label>Fecha Lanzamiento:</label>
        <div>
            <InputDate class="form-control" @bind-Value="@Pelicula.Lanzamiento" />
            <ValidationMessage For="@(() => Pelicula.Lanzamiento)" />
        </div>
    </div>

    <div class="form-group form-markdown">
        <InputMarkdown @bind-Value="@Pelicula.Resumen"
                       For="@(() => Pelicula.Resumen)"
                       Label="Resumen" />
    </div>

    <div class="form-group">
        <InputImg Label="Foto" ImagenSeleccionada="ImagenSeleccionada" ImagenTemporal="" />
    </div>

    <div class="form-group">
        <label>Géneros:</label>
        <div>
            <SelectorMultiple Seleccionados="Seleccionados"
                              NoSeleccionados="NoSeleccionados"></SelectorMultiple>
        </div>
    </div>

    <div class="form-group">
        <label>Actores:</label>
        <div>
            <SelectorMultipleTypeahead Context="persona"
                                       SearchMethod="BuscarActores"
                                       ElementosSeleccionados="ActoresSeleccionados">
                <MyListTemplate>
                    @persona.Nombre <input type="text" placeholder="Personaje" @bind="persona.Personaje" />
                </MyListTemplate>
                <MyResultTemplate>
                    <img style="width: 50px" src="@persona.Foto" />
                    @persona.Nombre
                </MyResultTemplate>

            </SelectorMultipleTypeahead>

        </div>
    </div>

    <button type="submit" class="btn btn-success">Salvar Película</button>

</EditForm>

@code {
    [Parameter] public Pelicula Pelicula { get; set; }
    [Parameter] public EventCallback OnValidSubmit { get; set; }
    [Parameter] public List<Genero> GenerosSeleccionados { get; set; } = new List<Genero>();
    [Parameter] public List<Genero> GenerosNoSeleccionados { get; set; } = new List<Genero>();
    [Parameter] public List<Persona> ActoresSeleccionados { get; set; } = new List<Persona>();

    private List<SelectorMultipleModel> Seleccionados { get; set; } = new List<SelectorMultipleModel>();
    private List<SelectorMultipleModel> NoSeleccionados { get; set; } = new List<SelectorMultipleModel>();
    private string posterTemporal;

    protected override void OnInitialized()
    {
        Seleccionados = GenerosSeleccionados.Select(x => new SelectorMultipleModel(x.Id.ToString(), x.Nombre)).ToList();
        NoSeleccionados = GenerosNoSeleccionados.Select(x => new SelectorMultipleModel(x.Id.ToString(), x.Nombre)).ToList();
        if (!string.IsNullOrWhiteSpace(Pelicula.Poster))
        {
            posterTemporal = Pelicula.Poster;
            Pelicula.Poster = null;
        }
    }

    private void ImagenSeleccionada(string imagenBase64)
    {
        Pelicula.Poster = imagenBase64;
    }

    private async Task<IEnumerable<Persona>> BuscarActores(string searchText)
    {
        var responseHTTP = await repositorio.Get<List<Persona>>($"api/personas/buscar/{searchText}");
        return responseHTTP.Response;
    }

    private async Task OnDataAnnonationsValidated()
    {
        Pelicula.GenerosPelicula = Seleccionados.Select(x => new GeneroPelicula { GeneroId = int.Parse(x.Llave) }).ToList();
        Pelicula.PeliculasActor = ActoresSeleccionados.Select(x => new PeliculaActor { PersonaId = x.Id, Personaje = x.Personaje }).ToList();

        if (!string.IsNullOrWhiteSpace(Pelicula.Poster)) { posterTemporal = null; }

        await OnValidSubmit.InvokeAsync(null);
    }

}